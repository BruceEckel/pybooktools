# Start of file: C:\git\pybooktools\src\pydemo\tests\test_corner_cases.py
# test_corner_cases.py
from pathlib import Path
import shutil
import pytest
from hypothesis import given, strategies as st

from pydemo import DemoDir


@pytest.mark.parametrize("input_text, expected_error", [
    ("", ValueError),  # No directory name
    ("---\nprint('No directory name')", ValueError),  # No valid directory header
    ("[valid_dir]\n---", ValueError),  # No content after separator
    ("[valid_dir]\n--- ###", ValueError),  # Invalid filename
])
def test_invalid_input(input_text: str, expected_error: type[Exception]):
    """Test that invalid inputs raise the appropriate exceptions."""
    with pytest.raises(expected_error):
        DemoDir(input_text)


@pytest.fixture
def demo_dir_empty(tmp_path: Path) -> DemoDir:
    """Creates a DemoDir instance with no example content."""
    input_text = f"[{tmp_path / 'empty_test_dir'}]"
    return DemoDir(input_text=input_text)


def test_no_examples(demo_dir_empty: DemoDir):
    """Test that DemoDir handles cases with no examples correctly."""
    assert demo_dir_empty.examples == []
    assert demo_dir_empty.dirpath.exists()


@pytest.fixture
def demo_dir_large_example(tmp_path: Path) -> DemoDir:
    """Creates a DemoDir instance with a large example."""
    large_content = "\n".join(["print('Line {0}')".format(i) for i in range(1000)])
    input_text = f"[{tmp_path / 'large_example_dir'}]\n---\n{large_content}"
    return DemoDir(input_text=input_text)


def test_large_example_file(demo_dir_large_example: DemoDir):
    """Test that large examples are handled correctly."""
    assert len(demo_dir_large_example.examples) == 1
    example = demo_dir_large_example.examples[0]
    assert example.file_path.exists()
    assert len(example.file_path.read_text(encoding="utf-8").splitlines()) == 1001  # Including the slug line


def test_special_characters_in_directory(tmp_path: Path):
    """Test that directories with special characters are handled correctly."""
    special_dir = tmp_path / "special_@_dir"
    input_text = f"[{special_dir}]\n---\nspecial_chars_test = 'Handled'"
    demo_dir = DemoDir(input_text=input_text)
    assert demo_dir.dirpath.exists()
    assert demo_dir.examples[0].example_text == "# example_1.py\nspecial_chars_test = 'Handled'"


def test_unicode_content(tmp_path: Path):
    """Test handling of Unicode content in examples."""
    input_text = f"""[{tmp_path / "unicode_dir"}]
    ---
    print('Hello, 世界!')"""
    demo_dir = DemoDir(input_text=input_text)
    assert demo_dir.examples[0].example_text == "# example_1.py\nprint('Hello, 世界!')"


def test_path_normalization(tmp_path: Path):
    """Test path normalization across different formats."""
    mixed_path = tmp_path / "path/../path/./demo"
    input_text = f"""[{mixed_path}]
    ---
    print('test')"""
    demo_dir = DemoDir(input_text=input_text)
    assert demo_dir.dirpath == (tmp_path / "path/demo").resolve()


@given(st.text(min_size=1, max_size=100, alphabet=st.characters(blacklist_categories=('Cs',))))
def test_property_example_content(tmp_path: Path, content: str):
    """Test that any valid content is preserved in examples."""
    input_text = f"""[{tmp_path / "prop_test_dir"}]
    ---
    {content}"""
    try:
        demo_dir = DemoDir(input_text=input_text)
        assert content.strip() in demo_dir.examples[0].example_text
    except ValueError:
        pytest.skip("Invalid input for DemoDir")
    finally:
        if (tmp_path / "prop_test_dir").exists():
            shutil.rmtree(tmp_path / "prop_test_dir")


# End of file: C:\git\pybooktools\src\pydemo\tests\test_corner_cases.py

# Start of file: C:\git\pybooktools\src\pydemo\tests\test_examples.py
# test_examples.py
import threading
from pathlib import Path

import pytest

from pydemo import DemoDir


@pytest.fixture
def example_input() -> str:
    return """[example_test_dir]
    --- foo.py
    print('Example test file 1')
    --- bar.py
    print('Example test file 2')"""


@pytest.fixture
def demo_dir_with_examples(tmp_path: Path, example_input: str) -> DemoDir:
    test_path = tmp_path / "example_test_dir"
    return DemoDir(input_text=example_input.replace("example_test_dir", str(test_path)))


def test_example_count(demo_dir_with_examples: DemoDir):
    """Test that the correct number of examples are created."""
    assert len(demo_dir_with_examples.examples) == 2


def test_example_file_paths(demo_dir_with_examples: DemoDir):
    """Test that each example has the correct file path."""
    expected_paths = {"foo.py", "bar.py"}
    actual_paths = {example.file_path.name for example in demo_dir_with_examples.examples}
    assert actual_paths == expected_paths


def test_example_file_content(demo_dir_with_examples: DemoDir):
    """Test that example files have the correct content."""
    contents = [
        example.file_path.read_text(encoding="utf-8").strip() for example in demo_dir_with_examples.examples
    ]
    assert contents == [
        "# example_1.py\nprint('Example test file 1')",
        "# example_2.py\nprint('Example test file 2')"
    ]


def test_example_filename_generation(demo_dir_with_examples: DemoDir):
    """Test that filenames are generated correctly."""
    assert demo_dir_with_examples.examples[0].filename == "example_1.py"
    assert demo_dir_with_examples.examples[1].filename == "example_2.py"


def test_concurrent_access(tmp_path: Path):
    """Test concurrent access to the same directory."""
    input_text = f"""[{tmp_path / "concurrent_dir"}]
    ---
    print('test')"""

    demo_dirs = []
    def create_demo_dir():
        demo_dirs.append(DemoDir(input_text=input_text))

    threads = [threading.Thread(target=create_demo_dir) for _ in range(3)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()

    assert len(demo_dirs) == 3
    assert all(d.dirpath.exists() for d in demo_dirs)


def test_empty_lines_handling(tmp_path: Path):
    """Test that empty lines are preserved in examples."""
    input_text = f"""[{tmp_path / "empty_lines_dir"}]
    ---
    print('line1')

    print('line2')

    print('line3')"""
    demo_dir = DemoDir(input_text=input_text)
    content = demo_dir.examples[0].file_path.read_text(encoding="utf-8")
    assert content.count('\n') == 5  # Including the slug line


def test_whitespace_preservation(tmp_path: Path):
    """Test that significant whitespace is preserved."""
    input_text = f"""[{tmp_path / "whitespace_dir"}]
    ---
    def example():
        print('indented')
            print('double indented')"""
    demo_dir = DemoDir(input_text=input_text)
    content = demo_dir.examples[0].file_path.read_text(encoding="utf-8")
    assert "    print('indented')" in content
    assert "        print('double indented')" in content


# End of file: C:\git\pybooktools\src\pydemo\tests\test_examples.py

# Start of file: C:\git\pybooktools\src\pydemo\tests\test_initialization.py
# test_initialization.py
import os
from pathlib import Path

import pytest

from pydemo import DemoDir

test_input_text = """[test_dir]\n---\nprint('Hello, World!')"""


@pytest.fixture
def demo_dir_instance(tmp_path: Path) -> DemoDir:
    """Creates a DemoDir instance with temporary path."""
    test_path = tmp_path / "test_dir"
    return DemoDir(input_text=test_input_text.replace("test_dir", str(test_path)))


def test_demo_dir_initialization(demo_dir_instance: DemoDir):
    """Test that DemoDir is initialized correctly."""
    assert demo_dir_instance.dirpath.name == "test_dir"
    assert len(demo_dir_instance.examples) == 1
    assert demo_dir_instance.examples[0].example_text == "# example_1.py\nprint('Hello, World!')"


def test_demo_dir_directory_preparation(demo_dir_instance: DemoDir):
    """Test that DemoDir creates the correct directory."""
    assert demo_dir_instance.dirpath.exists()
    assert demo_dir_instance.dirpath.is_dir()


def test_demo_dir_example_files_written(demo_dir_instance: DemoDir):
    """Test that examples are written to disk properly."""
    example_file = demo_dir_instance.examples[0].file_path
    assert example_file.exists()
    assert example_file.read_text(encoding="utf-8").strip() == "# example_1.py\nprint('Hello, World!')"


def test_demo_dir_cleanup(demo_dir_instance: DemoDir):
    """Test that DemoDir cleanup removes the directory."""
    demo_dir_instance.delete()
    assert not demo_dir_instance.dirpath.exists()


def test_absolute_relative_path_handling(tmp_path: Path):
    """Test handling of absolute and relative paths."""
    rel_path = Path("relative/test/dir")
    abs_path = tmp_path / "absolute/test/dir"

    # Test relative path
    rel_input = f"[{rel_path}]\n---\nprint('test')"
    rel_demo = DemoDir(input_text=rel_input)
    assert rel_demo.dirpath.is_absolute()

    # Test absolute path
    abs_input = f"[{abs_path}]\n---\nprint('test')"
    abs_demo = DemoDir(input_text=abs_input)
    assert abs_demo.dirpath.is_absolute()


def test_path_separator_handling(tmp_path: Path):
    """Test handling of different path separators."""
    # Create path with forward slashes
    forward_path = tmp_path / "forward/slash/path"
    forward_input = f"[{forward_path}]\n---\nprint('test')"
    forward_demo = DemoDir(input_text=forward_input)
    assert forward_demo.dirpath.exists()

    # Create path with backslashes (Windows-style)
    back_path = str(tmp_path / "back\\slash\\path").replace('/', '\\')
    back_input = f"[{back_path}]\n---\nprint('test')"
    back_demo = DemoDir(input_text=back_input)
    assert back_demo.dirpath.exists()


def test_reuse_existing_directory(tmp_path: Path):
    """Test reusing an existing directory."""
    test_path = tmp_path / "reuse_dir"
    input_text = f"[{test_path}]\n---\nprint('test1')"

    # Create first instance
    demo1 = DemoDir(input_text=input_text)
    assert demo1.dirpath.exists()

    # Create second instance with same directory
    input_text2 = f"[{test_path}]\n---\nprint('test2')"
    demo2 = DemoDir(input_text=input_text2)
    assert demo2.dirpath.exists()

    # Verify content was updated
    assert "test2" in demo2.examples[0].example_text


# End of file: C:\git\pybooktools\src\pydemo\tests\test_initialization.py

# Start of file: C:\git\pybooktools\src\pydemo\tests\__init__.py
# End of file: C:\git\pybooktools\src\pydemo\tests\__init__.py
