What follows is intended to be used as input to AI models that can understand Python code.

The files are "flattened" into a single text file with one file per Python file.
Each file starts with a comment indicating the file's path, followed by the file's content.
The end of each file is marked with a comment indicating the end of the file.

Please absorb these files, and produce requested corrections in the same format.
When producing corrections, please use the same file path format as the original files.
When producing corrections, only include the files that are modified, but include complete files.

# Start of file: C:\git\pybooktools\src\pydemo\demo_dir.py
# demo_dir.py
import re
import shutil
from dataclasses import dataclass, field
from pathlib import Path
from typing import ClassVar


def banner(msg: str) -> None:
    print(f" {msg} ".center(60, '-'))


@dataclass
class Example:
    id_counter: ClassVar[int] = 0
    demo_dir_path: ClassVar[Path] = field(init=False)
    dir_path: Path
    input_text: str
    example_text: str = field(init=False)
    lines: list[str] = field(init=False)
    _filename: str = field(init=False)
    _relative_path: str = field(init=False)

    def __post_init__(self) -> None:
        self.input_text = self.input_text.strip()
        self.lines = self.input_text.splitlines()
        self._filename = self._extract_filename() or self._generate_filename()
        self._ensure_slug_line()
        self.example_text = "\n".join(self.lines)
        self._relative_path = self.dir_path.resolve().relative_to(self.demo_dir_path.resolve()).as_posix()

    def _ensure_slug_line(self) -> None:
        slugline_pattern = re.compile(r"^#\s*([\w/]+\.py)")
        if self.lines and slugline_pattern.match(self.lines[0]):
            self.lines[0] = f"# {self._filename}"
        else:
            self.lines.insert(0, f"# {self._filename}")

    @classmethod
    def reset_counter(cls) -> None:
        cls.id_counter = 0

    def _extract_filename(self) -> str | None:
        match = re.match(r"^---\s*([\w/]+\.py)", self.lines[0])
        return match.group(1) if match else None

    @staticmethod
    def _generate_filename() -> str:
        Example.id_counter += 1
        return f"example_{Example.id_counter}.py"

    @property
    def filename(self) -> str:
        return self._filename

    @property
    def file_path(self) -> Path:
        return self.dir_path / self.filename

    def write_to_disk(self) -> None:
        self.file_path.parent.mkdir(parents=True, exist_ok=True)
        self.file_path.write_text(self.example_text + "\n", encoding="utf-8")

    def __repr__(self) -> str:
        slugline = f"# {self.filename}"
        content_without_slug = self.example_text.removeprefix(slugline).lstrip()
        return f"--- {self._relative_path}\n{content_without_slug}"

    def __str__(self) -> str:
        return f"{self.file_path.as_posix()}:\n{self.example_text}"


@dataclass
class DemoDir:
    input_text: str
    input_lines: list[str] = field(init=False)
    dirpath: Path = field(init=False)
    examples: list[Example] = field(default_factory=list)

    def __post_init__(self) -> None:
        self.input_lines = self._extract_demo_dir_lines(self.input_text)
        self.dirpath = Path(self.input_lines.pop(0).strip(' []')).resolve()
        Example.demo_dir_path = self.dirpath
        self._parse_examples()
        self._prepare_directory()
        self._write_examples_to_disk()

    @staticmethod
    def _extract_demo_dir_lines(input_text: str) -> list[str]:
        lines = input_text.strip().splitlines()
        start_index = next((i for i, line in enumerate(lines) if re.match(r"^\[.+\]$", line.strip())), None)
        if start_index is None:
            raise ValueError("Input text does not contain a valid directory name in square brackets.")
        return lines[start_index:]

    def _parse_examples(self) -> None:
        Example.reset_counter()
        current_block, file_path = [], None

        for line in self.input_lines:
            if line.startswith('---'):
                if current_block:
                    self.examples.append(Example(self.dirpath / (file_path or ''), input_text="\n".join(current_block)))
                    current_block.clear()
                file_path = line[3:].split('#')[0].strip()
            else:
                current_block.append(line)

        if current_block:
            self.examples.append(Example(self.dirpath / (file_path or ''), input_text="\n".join(current_block)))

    def _prepare_directory(self) -> None:
        if self.dirpath.exists():
            shutil.rmtree(self.dirpath)
        self.dirpath.mkdir(parents=True)

    def _write_examples_to_disk(self) -> None:
        for example in self.examples:
            example.write_to_disk()

    @classmethod
    def from_file(cls, file_path: Path) -> "DemoDir":
        return cls(file_path.read_text(encoding="utf-8"))

    @classmethod
    def from_directory(cls, directory: Path) -> "DemoDir":
        Example.reset_counter()
        examples = [
            Example(
                dir_path=file.parent.resolve(),
                input_text=file.read_text(encoding="utf-8").strip()
            )
            for file in directory.rglob("*.py")
        ]
        demo_dir = cls(input_text=f"[{directory.name}]")
        demo_dir.examples = examples
        return demo_dir

    def delete(self) -> None:
        if self.dirpath.exists():
            shutil.rmtree(self.dirpath)

    def __repr__(self) -> str:
        return f"[{self.dirpath.name}]\n" + "\n".join(repr(example) for example in self.examples)

    def __str__(self) -> str:
        return f"[{self.dirpath.name}]\n" + "\n".join(str(example) for example in self.examples)

    def __iter__(self):
        return iter(self.examples)

    def show(self) -> None:
        banner(self.dirpath.name)
        banner("str")
        print(self)
        banner("repr")
        print(repr(self))
        banner("Paths")
        for example in self:
            print(example.file_path)


# File names are auto-generated by `Example` class:
test_str = """
[demo_dir_name]
---              # Create in demo_dir_name
print('Valid')
print('Example #1')
--- foo          # Create in demo_dir_name/foo
print('Another')
print('Valid')
print('Example #2')
--- bar          # Create in demo_dir_name/bar
print('Valid')
print('Example')
print('#3')
--- bar/baz      # Create in demo_dir_name/baz
print('No slug line')
print('Example #4')
print('long enough')
--- baz/qux      # Create in demo_dir_name/baz/qux
print('For loop')
for i in range(5):
    print(f"{i = } Example #5")
--- baz/qux/zap  # Create in demo_dir_name/baz/qux/zap
print('While')
i = 0
while i < 5:
    i += 1
    print(f"{i = } Example #6")
"""

if __name__ == "__main__":
    examples_a = DemoDir(test_str)
    examples_a.show()
    examples = DemoDir.from_directory(examples_a.dirpath)
    examples.show()
    examples.delete()

# End of file: C:\git\pybooktools\src\pydemo\demo_dir.py

# Start of file: C:\git\pybooktools\src\pydemo\__init__.py
# __init__.py
from .demo_dir import DemoDir

__all__ = [
    "DemoDir",
]

# End of file: C:\git\pybooktools\src\pydemo\__init__.py

# Start of file: C:\git\pybooktools\src\pydemo\tests\test_corner_cases.py
# test_corner_cases.py
from pathlib import Path

import pytest
from hypothesis import given, strategies as st, settings, HealthCheck

from pydemo import DemoDir


@pytest.mark.parametrize("input_text, expected_error", [
    ("", ValueError),  # No directory name
    ("---\nprint('No directory name')", ValueError),  # No valid directory header
    ("[valid_dir]", ValueError),  # No separator
    ("[valid_dir]\n--- ###\n", ValueError),  # Invalid filename
])
def test_invalid_input(input_text: str, expected_error: type[Exception], tmp_path: Path):
    """Test that invalid inputs raise the appropriate exceptions."""
    with pytest.raises(expected_error):
        DemoDir(input_text.replace("valid_dir", str(tmp_path / "valid_dir")))


@pytest.fixture
def demo_dir_empty(tmp_path: Path) -> DemoDir:
    """Creates a DemoDir instance with no example content."""
    input_text = f"[{tmp_path / 'empty_test_dir'}]"
    return DemoDir(input_text=input_text)


def test_no_examples(demo_dir_empty: DemoDir):
    """Test that DemoDir handles cases with no examples correctly."""
    assert demo_dir_empty.examples == []
    assert demo_dir_empty.dirpath.exists()


@pytest.fixture
def demo_dir_large_example(tmp_path: Path) -> DemoDir:
    """Creates a DemoDir instance with a large example."""
    large_content = "\n".join(["print('Line {0}')".format(i) for i in range(1000)])
    input_text = f"[{tmp_path / 'large_example_dir'}]\n---\n{large_content}"
    return DemoDir(input_text=input_text)


def test_large_example_file(demo_dir_large_example: DemoDir):
    """Test that large examples are handled correctly."""
    assert len(demo_dir_large_example.examples) == 1
    example = demo_dir_large_example.examples[0]
    assert example.file_path.exists()
    assert len(example.file_path.read_text(encoding="utf-8").splitlines()) == 1001  # Including the slug line


def test_special_characters_in_directory(tmp_path: Path):
    """Test that directories with special characters are handled correctly."""
    special_dir = tmp_path / "special_@_dir"
    input_text = f"[{special_dir}]\n---\nspecial_chars_test = 'Handled'"
    demo_dir = DemoDir(input_text=input_text)
    assert demo_dir.dirpath.exists()
    assert demo_dir.examples[0].example_text == "# example_1.py\nspecial_chars_test = 'Handled'"


def test_unicode_content(tmp_path: Path):
    """Test handling of Unicode content in examples."""
    input_text = f"""[{tmp_path / "unicode_dir"}]
---
print('Hello, 世界!')"""
    demo_dir = DemoDir(input_text=input_text)
    assert demo_dir.examples[0].example_text == "# example_1.py\nprint('Hello, 世界!')"


@given(st.text(min_size=1, max_size=100, alphabet=st.characters(blacklist_categories=('Cs',))))
@settings(suppress_health_check=[HealthCheck.function_scoped_fixture])
def test_property_example_content(content: str):
    """Test that any valid content is preserved in examples."""
    import tempfile
    with tempfile.TemporaryDirectory() as tmpdir:
        input_text = f"""[{tmpdir}/prop_test_dir]
---
{content}"""
        try:
            demo_dir = DemoDir(input_text=input_text)
            assert content.strip() in demo_dir.examples[0].example_text
        except ValueError:
            pytest.skip("Invalid input for DemoDir")

# End of file: C:\git\pybooktools\src\pydemo\tests\test_corner_cases.py

# Start of file: C:\git\pybooktools\src\pydemo\tests\test_examples.py
# test_examples.py
import threading
import time
from pathlib import Path

import pytest

from pydemo import DemoDir


@pytest.fixture
def example_input(tmp_path: Path) -> str:
    return f"""[{tmp_path / "example_test_dir"}]
---
print('Example test file 1')
---
print('Example test file 2')"""


@pytest.fixture
def demo_dir_with_examples(example_input: str) -> DemoDir:
    return DemoDir(input_text=example_input)


def test_example_count(demo_dir_with_examples: DemoDir):
    """Test that the correct number of examples are created."""
    assert len(demo_dir_with_examples.examples) == 2


def test_example_files(demo_dir_with_examples: DemoDir):
    """Test that example files have the correct content."""
    expected_contents = [
        "# example_1.py\nprint('Example test file 1')",
        "# example_2.py\nprint('Example test file 2')"
    ]
    for example, expected in zip(demo_dir_with_examples.examples, expected_contents):
        assert example.example_text.strip() == expected


def test_example_filename_generation(demo_dir_with_examples: DemoDir):
    """Test that filenames are generated correctly."""
    assert demo_dir_with_examples.examples[0].filename == "example_1.py"
    assert demo_dir_with_examples.examples[1].filename == "example_2.py"


def test_concurrent_access(tmp_path: Path):
    """Test concurrent access to the same directory."""
    lock = threading.Lock()
    input_text = f"""[{tmp_path / "concurrent_dir"}]
---
print('test')"""

    demo_dirs = []
    def create_demo_dir():
        with lock:
            demo_dir = DemoDir(input_text=input_text)
            demo_dirs.append(demo_dir)
            time.sleep(0.1)  # Ensure some overlap

    threads = [threading.Thread(target=create_demo_dir) for _ in range(3)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()

    assert len(demo_dirs) == 3
    assert all(d.dirpath.exists() for d in demo_dirs)


def test_empty_lines_handling(tmp_path: Path):
    """Test that empty lines are preserved in examples."""
    input_text = f"""[{tmp_path / "empty_lines_dir"}]
---
print('line1')

print('line2')

print('line3')"""
    demo_dir = DemoDir(input_text=input_text)
    content = demo_dir.examples[0].file_path.read_text(encoding="utf-8")
    assert content.strip().count('\n') == 4  # slug line + 2 empty lines + 2 content lines


def test_whitespace_preservation(tmp_path: Path):
    """Test that significant whitespace is preserved."""
    input_text = f"""[{tmp_path / "whitespace_dir"}]
---
def example():
    print('indented')
        print('double indented')"""
    demo_dir = DemoDir(input_text=input_text)
    content = demo_dir.examples[0].file_path.read_text(encoding="utf-8")
    assert "    print('indented')" in content
    assert "        print('double indented')" in content


# End of file: C:\git\pybooktools\src\pydemo\tests\test_examples.py

# Start of file: C:\git\pybooktools\src\pydemo\tests\test_initialization.py
# test_initialization.py
import os
from pathlib import Path

import pytest

from pydemo import DemoDir

test_input_text = """[test_dir]\n---\nprint('Hello, World!')"""


@pytest.fixture
def demo_dir_instance(tmp_path: Path) -> DemoDir:
    """Creates a DemoDir instance with temporary path."""
    test_path = tmp_path / "test_dir"
    return DemoDir(input_text=test_input_text.replace("test_dir", str(test_path)))


def test_demo_dir_initialization(demo_dir_instance: DemoDir):
    """Test that DemoDir is initialized correctly."""
    assert demo_dir_instance.dirpath.name == "test_dir"
    assert len(demo_dir_instance.examples) == 1
    assert demo_dir_instance.examples[0].example_text == "# example_1.py\nprint('Hello, World!')"


def test_demo_dir_directory_preparation(demo_dir_instance: DemoDir):
    """Test that DemoDir creates the correct directory."""
    assert demo_dir_instance.dirpath.exists()
    assert demo_dir_instance.dirpath.is_dir()


def test_demo_dir_example_files_written(demo_dir_instance: DemoDir):
    """Test that examples are written to disk properly."""
    example_file = demo_dir_instance.examples[0].file_path
    assert example_file.exists()
    assert example_file.read_text(encoding="utf-8").strip() == "# example_1.py\nprint('Hello, World!')"


def test_demo_dir_cleanup(demo_dir_instance: DemoDir):
    """Test that DemoDir cleanup removes the directory."""
    demo_dir_instance.delete()
    assert not demo_dir_instance.dirpath.exists()


def test_absolute_relative_path_handling(tmp_path: Path):
    """Test handling of absolute and relative paths."""
    rel_path = Path("relative/test/dir")
    abs_path = tmp_path / "absolute/test/dir"

    # Test relative path
    rel_input = f"[{rel_path}]\n---\nprint('test')"
    rel_demo = DemoDir(input_text=rel_input)
    assert rel_demo.dirpath.is_absolute()

    # Test absolute path
    abs_input = f"[{abs_path}]\n---\nprint('test')"
    abs_demo = DemoDir(input_text=abs_input)
    assert abs_demo.dirpath.is_absolute()


def test_path_separator_handling(tmp_path: Path):
    """Test handling of different path separators."""
    # Create path with forward slashes
    forward_path = tmp_path / "forward/slash/path"
    forward_input = f"[{forward_path}]\n---\nprint('test')"
    forward_demo = DemoDir(input_text=forward_input)
    assert forward_demo.dirpath.exists()

    # Create path with backslashes (Windows-style)
    back_path = str(tmp_path / "back\\slash\\path").replace('/', '\\')
    back_input = f"[{back_path}]\n---\nprint('test')"
    back_demo = DemoDir(input_text=back_input)
    assert back_demo.dirpath.exists()


def test_reuse_existing_directory(tmp_path: Path):
    """Test reusing an existing directory."""
    test_path = tmp_path / "reuse_dir"
    input_text = f"[{test_path}]\n---\nprint('test1')"

    # Create first instance
    demo1 = DemoDir(input_text=input_text)
    assert demo1.dirpath.exists()

    # Create second instance with same directory
    input_text2 = f"[{test_path}]\n---\nprint('test2')"
    demo2 = DemoDir(input_text=input_text2)
    assert demo2.dirpath.exists()

    # Verify content was updated
    assert "test2" in demo2.examples[0].example_text


# End of file: C:\git\pybooktools\src\pydemo\tests\test_initialization.py

# Start of file: C:\git\pybooktools\src\pydemo\tests\__init__.py

# End of file: C:\git\pybooktools\src\pydemo\tests\__init__.py
